#!/usr/bin/env node

var path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('decouverto-website:server');
var http = require('http');

var async = require('async');
var schedule = require('node-schedule');
var moment = require('moment');

/**
 * Get port from environment and store in Express.
 */

var port = require('env-port')('8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var models = require('../models');

models.waterline.initialize(models.config, function (err, models) {
  if (err) throw err;

  app.models = models.collections;
  app.connections = models.connections;
  app.walks = require('json-store-list')(path.resolve(__dirname, '../walks/index.json'));
  app.stats = require('json-store-stats')(path.resolve(__dirname, '../walks/stats.json'));
  app.metas = require('../libs/metas')({
    short_desc: '',
    books: '',
    long_desc: '',
    app_doc: ''
  }, path.resolve(__dirname, '../metas.json'));
  app.associateWalksWithStats = function () {
    var walks = app.walks.getAll();
    var stats = app.stats.getAll();
    var generated = [];
    walks.forEach(function (el) {
      var countApp = 0, countWeb = 0;
      if (stats.hasOwnProperty(el.id)) {
        countApp = stats[el.id];
      }
      if (stats.hasOwnProperty(el.id + '-prev')) {
        countWeb = stats[el.id + '-prev'];
      }
      generated.push({
        id: el.id,
        title: el.title,
        web: countWeb,
        app: countApp
      });
    });
    return generated;
  }

  schedule.scheduleJob('0 0 0 * * 0', function () {
    app.models.users.find().exec(function (err, users) {
      if (!err) {
        users.forEach(function (user) {
          delete user.password;
        });
        require('../tasks/send-stats')(app.associateWalksWithStats(), users, function (err) {
          if (!err) {
            app.stats.purge(function () { });
          }
        });
      }
    });
  });

  // Start server
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  console.log(require('server-welcome')(port, 'Decouverto Website'));
});

/**
 * Build javascript client files.
 */

var existsFile = require('exists-file');
var bundler = require('../build/bundle');
existsFile(path.resolve(__dirname, '../public/javascripts/admin/build.js'), function (err, exists) {
  if (!err && !exists) {
    bundler.admin();
  }
});
existsFile(path.resolve(__dirname, '../public/javascripts/preview/build.js'), function (err, exists) {
  if (!err && !exists) {
    bundler.preview();
  }
});
existsFile(path.resolve(__dirname, '../public/javascripts/index/build.js'), function (err, exists) {
  if (!err && !exists) {
    bundler.index();
  }
});




/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}